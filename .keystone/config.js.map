{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import { config } from \"@keystone-6/core\";\nimport { lists } from \"./schema\";\n\nimport { withAuth, session } from \"./auth\";\n\nexport default withAuth(\n    config({\n        db: {\n            provider: \"sqlite\",\n            url: \"file:./keystone.db\",\n        },\n        lists,\n        session,\n    })\n);\n", "import { list } from \"@keystone-6/core\";\nimport { text, password, timestamp } from \"@keystone-6/core/fields\";\nimport type { Lists } from \".keystone/types\";\n\ntype Session = {\n    data: {\n        name: string;\n    }\n}\n\nconst loggedIn = ({ session }: { session?: Session }) => Boolean(session)\n\nexport const lists: Lists = {\n    User: list({\n        access: {\n            operation: {\n                query: loggedIn,\n                create: loggedIn,\n                update: loggedIn,\n                delete: loggedIn\n            }\n        },\n        fields: {\n            name: text({ validation: { isRequired: true } }),\n            email: text({\n                validation: { isRequired: true },\n                isIndexed: \"unique\",\n            }),\n            password: password({ validation: { isRequired: true } }),\n            createdAt: timestamp({\n                defaultValue: { kind: \"now\" },\n            }),\n        },\n    }),\n};\n", "import { randomBytes } from \"crypto\";\nimport { createAuth } from \"@keystone-6/auth\";\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n    sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\nconst { withAuth } = createAuth({\n    listKey: \"User\",\n    identityField: \"email\",\n    sessionData: \"name createdAt\",\n    secretField: \"password\",\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\nconst session = statelessSessions({\n    maxAge: sessionMaxAge,\n    secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,eAAuB;;;ACAvB,kBAAqB;AACrB,oBAA0C;AAS1C,IAAM,WAAW,CAAC,EAAE,SAAAC,SAAQ,MAA6B,QAAQA,QAAO;AAEjE,IAAM,QAAe;AAAA,EACxB,UAAM,kBAAK;AAAA,IACP,QAAQ;AAAA,MACJ,WAAW;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAC/C,WAAO,oBAAK;AAAA,QACR,YAAY,EAAE,YAAY,KAAK;AAAA,QAC/B,WAAW;AAAA,MACf,CAAC;AAAA,MACD,cAAU,wBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MACvD,eAAW,yBAAU;AAAA,QACjB,cAAc,EAAE,MAAM,MAAM;AAAA,MAChC,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACL;;;AClCA,oBAA4B;AAC5B,kBAA2B;AAC3B,qBAAkC;AAElC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AACzD,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAClD;AAEA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC5B,SAAS;AAAA,EACT,eAAe;AAAA,EACf,aAAa;AAAA,EACb,aAAa;AACjB,CAAC;AAED,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAErC,IAAM,cAAU,kCAAkB;AAAA,EAC9B,QAAQ;AAAA,EACR,QAAQ;AACZ,CAAC;;;AFhBD,IAAO,mBAAQ;AAAA,MACX,qBAAO;AAAA,IACH,IAAI;AAAA,MACA,UAAU;AAAA,MACV,KAAK;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;",
  "names": ["import_core", "session"]
}
